{"version":3,"sources":["assets/logo.svg","assets/sold-out.svg","components/Logo/Logo.js","components/ProductGrid/ProductGrid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","src","logo","alt","Soldout","classname","soldout","ProductGrid","products","App","state","fetch","then","response","json","data","setState","items","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,iBCA3CD,EAAOC,QAAU,IAA0B,sC,2OCY5BC,G,MARF,WACX,OACE,4BAAQC,UAAU,eAChB,yBAAKC,IAAKC,IAAMC,IAAI,Y,6BCEpBC,EAAU,WACd,OACE,0BAAMC,UAAU,WACd,yBAAKJ,IAAKK,IAASH,IAAI,KACvB,mFAuCSI,EAjBK,SAAC,GAAiB,EAAfC,SAGnB,OAFS,KAEF,kBAAC,EAAD,OCVIC,G,wDAtBb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAACF,SAAU,IAFZ,E,gEAKO,IAAD,OAClBG,MAAM,uDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACR,SAASO,EAAKA,KAAKE,a,+BAIlD,IAAIT,EAAWU,KAAKR,MAAMF,SAC1B,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaQ,SAAUA,S,GAjBbW,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.16347623.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e2c6c8c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/sold-out.b1186c09.svg\";","import React from 'react';\nimport logo from '../../assets/logo.svg';\nimport './Logo.css';\n\nconst Logo = () => {\n  return (\n    <header className=\"Logo_header\">\n      <img src={logo} alt=\"logo\" />\n    </header>\n  )\n}\n\nexport default Logo;","import React from 'react';\nimport classnames from 'classnames'\nimport './ProductGrid.css';\nimport soldout from '../../assets/sold-out.svg'\n\n// TODO: need to reconsider design for product cards\n// should conditionally render; if products is null or sold out... render a sold out image\n// render a class for a product that is sold out\n\nconst Soldout = () => {\n  return (\n    <span classname=\"soldout\">\n      <img src={soldout} alt=\"\"></img>\n      <p>Sorry! We are all sold out! Please come back soon!</p>\n    </span>\n  )\n}\n\nconst Product = ({ product }) => {\n  var cx = classnames({\n    \"product-detail\": true,\n    \"product-available\": !product.soldOut,\n    \"product-soldout\": product.soldOut\n  })\n  return (\n    <li className=\"product\" key={product.id}>\n      <div className={cx}>\n        <p>Price: {product.price}</p>\n        <p>{product.product}</p>\n        <p>MSRP: {product.msrp}</p>\n      </div>\n    </li>\n    )\n}\n\nconst ProductGrid = ({ products }) => {\n  products = null;\n  if (!products) {\n    return <Soldout />\n  } else {\n    return (\n    <ul className=\"product-grid\">\n      {\n        products.map((product) =>\n          <Product product={product} />\n        )\n      }\n    </ul>\n    )\n  }\n}\n\nexport default ProductGrid;","import React from 'react';\nimport Logo from './components/Logo/Logo';\nimport ProductGrid from './components/ProductGrid/ProductGrid';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {products: []};\n  }\n\n  componentDidMount() {\n    fetch('https://applicant-dev.misfitsmarket.com/api/test/v1')\n      .then(response => response.json())\n      .then(data => this.setState({products:data.data.items}))\n  }\n\n  render() {\n    var products = this.state.products;\n    return (\n      <div className=\"App\">\n        <Logo />\n        <ProductGrid products={products}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}