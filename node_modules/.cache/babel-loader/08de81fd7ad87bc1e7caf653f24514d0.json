{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global['fast-equals'] = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\n   * @constant {boolean} HAS_MAP_SUPPORT\n   */\n\n  var HAS_MAP_SUPPORT = typeof Map === 'function';\n  /**\n   * @constant {boolean} HAS_SET_SUPPORT\n   */\n\n  var HAS_SET_SUPPORT = typeof Set === 'function';\n  /**\n   * @constant {boolean} HAS_WEAKSET_SUPPORT\n   */\n\n  var HAS_WEAKSET_SUPPORT = typeof WeakSet === 'function'; // constants\n\n  var keys = Object.keys;\n  /**\n   * @function addObjectToCache\n   *\n   * @description\n   * add object to cache if it is indeed an object\n   *\n   * @param {any} object the object to potentially add to the cache\n   * @param {Object|WeakSet} cache the cache to add to\n   * @returns {void}\n   */\n\n  var addObjectToCache = function addObjectToCache(object, cache) {\n    return object && typeof object === 'object' && cache.add(object);\n  };\n  /**\n   *\n   * @param {Array<Array<any>>} pairs the pairs to check in\n   * @param {Array<any>} pairToMatch the pair to check if exists\n   * @param {function} isEqual the equality comparator\n   * @param {any} meta the meta item to pass through\n   * @returns {boolean} does the pair exist in the pairs\n   */\n\n\n  var hasPair = function hasPair(pairs, pairToMatch, isEqual, meta) {\n    var pair;\n\n    for (var index = 0; index < pairs.length; index++) {\n      pair = pairs[index];\n\n      if (isEqual(pair[0], pairToMatch[0], meta) && isEqual(pair[1], pairToMatch[1], meta)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @function hasValue\n   *\n   * @description\n   * does the values include the vakye passed\n   *\n   * @param {Array<any>} values the values to check in\n   * @param {any} item the value to locate\n   * @param {function} isEqual the equality comparator\n   * @param {any} meta the meta item to pass through\n   * @returns {boolean} does the value exist in the values\n   */\n\n\n  var hasValue = function hasValue(values, item, isEqual, meta) {\n    for (var index = 0; index < values.length; index++) {\n      if (isEqual(values[index], item, meta)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @function sameValueZeroEqual\n   *\n   * @description\n   * are the objects passed strictly equal or both NaN\n   *\n   * @param {any} objectA the object to compare against\n   * @param {any} objectB the object to test\n   * @returns {boolean} are the objects equal by the SameValueZero principle\n   */\n\n\n  var sameValueZeroEqual = function sameValueZeroEqual(objectA, objectB) {\n    return objectA === objectB || objectA !== objectA && objectB !== objectB;\n  };\n  /**\n   * @function isPlainObject\n   *\n   * @description\n   * is the object a plain object\n   *\n   * @param {any} object the object to test\n   * @returns {boolean} is the object a plain object\n   */\n\n\n  var isPlainObject = function isPlainObject(object) {\n    return object.constructor === Object;\n  };\n  /**\n   * @function isPromiseLike\n   *\n   * @description\n   * is the object promise-like (thenable)\n   *\n   * @param {any} object the object to test\n   * @returns {boolean} is the object promise-like\n   */\n\n\n  var isPromiseLike = function isPromiseLike(object) {\n    return typeof object.then === 'function';\n  };\n  /**\n   * @function isReactElement\n   *\n   * @description\n   * is the object passed a react element\n   *\n   * @param {any} object the object to test\n   * @returns {boolean} is the object a react element\n   */\n\n\n  var isReactElement = function isReactElement(object) {\n    return !!(object.$$typeof && object._store);\n  };\n  /**\n   * @function getNewCache\n   *\n   * @description\n   * get a new cache object to prevent circular references\n   *\n   * @returns {Object|Weakset} the new cache object\n   */\n\n\n  var getNewCache = function getNewCache() {\n    return HAS_WEAKSET_SUPPORT ? new WeakSet() : Object.create({\n      _values: [],\n      add: function add(value) {\n        this._values.push(value);\n      },\n      has: function has(value) {\n        return !!~this._values.indexOf(value);\n      }\n    });\n  };\n  /**\n   * @function createCircularEqual\n   *\n   * @description\n   * create a custom isEqual handler specific to circular objects\n   *\n   * @param {funtion} [isEqual] the isEqual comparator to use instead of isDeepEqual\n   * @returns {function(any, any): boolean}\n   */\n\n\n  var createCircularEqual = function createCircularEqual(isEqual) {\n    return function (isDeepEqual) {\n      var comparator = isEqual || isDeepEqual;\n      return function (objectA, objectB, cache) {\n        if (cache === void 0) {\n          cache = getNewCache();\n        }\n\n        var cacheHasA = cache.has(objectA);\n        var cacheHasB = cache.has(objectB);\n\n        if (cacheHasA || cacheHasB) {\n          return cacheHasA && cacheHasB;\n        }\n\n        addObjectToCache(objectA, cache);\n        addObjectToCache(objectB, cache);\n        return comparator(objectA, objectB, cache);\n      };\n    };\n  };\n  /**\n   * @function toPairs\n   *\n   * @param {Map} map the map to convert to [key, value] pairs (entries)\n   * @returns {Array<Array<*>>} the [key, value] pairs\n   */\n\n\n  var toPairs = function toPairs(map) {\n    var pairs = [];\n    map.forEach(function (value, key) {\n      return pairs.push([key, value]);\n    });\n    return pairs;\n  };\n  /**\n   * @function toValues\n   *\n   * @param {Set} set the set to convert to values\n   * @returns {Array<*>} the values\n   */\n\n\n  var toValues = function toValues(set) {\n    var values = [];\n    set.forEach(function (value) {\n      return values.push(value);\n    });\n    return values;\n  };\n  /**\n   * @function areArraysEqual\n   *\n   * @description\n   * are the arrays equal in value\n   *\n   * @param {Array<any>} arrayA the array to test\n   * @param {Array<any>} arrayB the array to test against\n   * @param {function} isEqual the comparator to determine equality\n   * @param {any} meta the meta object to pass through\n   * @returns {boolean} are the arrays equal\n   */\n\n\n  var areArraysEqual = function areArraysEqual(arrayA, arrayB, isEqual, meta) {\n    if (arrayA.length !== arrayB.length) {\n      return false;\n    }\n\n    for (var index = 0; index < arrayA.length; index++) {\n      if (!isEqual(arrayA[index], arrayB[index], meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * @function areMapsEqual\n   *\n   * @description\n   * are the maps equal in value\n   *\n   * @param {Map} mapA the map to test\n   * @param {Map} mapB the map to test against\n   * @param {function} isEqual the comparator to determine equality\n   * @param {any} meta the meta map to pass through\n   * @returns {boolean} are the maps equal\n   */\n\n\n  var areMapsEqual = function areMapsEqual(mapA, mapB, isEqual, meta) {\n    if (mapA.size !== mapB.size) {\n      return false;\n    }\n\n    var pairsA = toPairs(mapA);\n    var pairsB = toPairs(mapB);\n\n    for (var index = 0; index < pairsA.length; index++) {\n      if (!hasPair(pairsB, pairsA[index], isEqual, meta) || !hasPair(pairsA, pairsB[index], isEqual, meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * @function areObjectsEqual\n   *\n   * @description\n   * are the objects equal in value\n   *\n   * @param {Object} objectA the object to test\n   * @param {Object} objectB the object to test against\n   * @param {function} isEqual the comparator to determine equality\n   * @param {any} meta the meta object to pass through\n   * @returns {boolean} are the objects equal\n   */\n\n\n  var areObjectsEqual = function areObjectsEqual(objectA, objectB, isEqual, meta) {\n    var keysA = keys(objectA);\n    var keysB = keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n\n    var key;\n\n    for (var index = 0; index < keysA.length; index++) {\n      key = keysA[index];\n\n      if (!hasValue(keysB, key, sameValueZeroEqual)) {\n        return false;\n      } // if a react element, ignore the \"_owner\" key because its not necessary for equality comparisons\n\n\n      if (key === '_owner' && isReactElement(objectA) && isReactElement(objectB)) {\n        continue;\n      }\n\n      if (!isEqual(objectA[key], objectB[key], meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * @function areRegExpsEqual\n   *\n   * @description\n   * are the regExps equal in value\n   *\n   * @param {RegExp} regExpA the regExp to test\n   * @param {RegExp} regExpB the regExp to test agains\n   * @returns {boolean} are the regExps equal\n   */\n\n\n  var areRegExpsEqual = function areRegExpsEqual(regExpA, regExpB) {\n    return regExpA.source === regExpB.source && regExpA.global === regExpB.global && regExpA.ignoreCase === regExpB.ignoreCase && regExpA.multiline === regExpB.multiline && regExpA.unicode === regExpB.unicode && regExpA.sticky === regExpB.sticky && regExpA.lastIndex === regExpB.lastIndex;\n  };\n  /**\n   * @function areSetsEqual\n   *\n   * @description\n   * are the sets equal in value\n   *\n   * @param {Set} setA the set to test\n   * @param {Set} setB the set to test against\n   * @param {function} isEqual the comparator to determine equality\n   * @param {any} meta the meta set to pass through\n   * @returns {boolean} are the sets equal\n   */\n\n\n  var areSetsEqual = function areSetsEqual(setA, setB, isEqual, meta) {\n    if (setA.size !== setB.size) {\n      return false;\n    }\n\n    var valuesA = toValues(setA);\n    var valuesB = toValues(setB);\n\n    for (var index = 0; index < valuesA.length; index++) {\n      if (!hasValue(valuesB, valuesA[index], isEqual, meta) || !hasValue(valuesA, valuesB[index], isEqual, meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // constants\n\n\n  var isArray = Array.isArray;\n\n  var createComparator = function createComparator(createIsEqual) {\n    // eslint-disable-next-line no-use-before-define\n    var isEqual = typeof createIsEqual === 'function' ? createIsEqual(comparator) : comparator;\n    /**\n     * @function comparator\n     *\n     * @description\n     * compare the value of the two objects and return true if they are equivalent in values\n     *\n     * @param {any} objectA the object to test against\n     * @param {any} objectB the object to test\n     * @param {any} [meta] an optional meta object that is passed through to all equality test calls\n     * @returns {boolean} are objectA and objectB equivalent in value\n     */\n\n    function comparator(objectA, objectB, meta) {\n      if (sameValueZeroEqual(objectA, objectB)) {\n        return true;\n      }\n\n      var typeOfA = typeof objectA;\n\n      if (typeOfA !== typeof objectB || typeOfA !== 'object' || !objectA || !objectB) {\n        return false;\n      }\n\n      if (isPlainObject(objectA) && isPlainObject(objectB)) {\n        return areObjectsEqual(objectA, objectB, isEqual, meta);\n      }\n\n      var arrayA = isArray(objectA);\n      var arrayB = isArray(objectB);\n\n      if (arrayA || arrayB) {\n        return arrayA === arrayB && areArraysEqual(objectA, objectB, isEqual, meta);\n      }\n\n      var dateA = objectA instanceof Date;\n      var dateB = objectB instanceof Date;\n\n      if (dateA || dateB) {\n        return dateA === dateB && sameValueZeroEqual(objectA.getTime(), objectB.getTime());\n      }\n\n      var regexpA = objectA instanceof RegExp;\n      var regexpB = objectB instanceof RegExp;\n\n      if (regexpA || regexpB) {\n        return regexpA === regexpB && areRegExpsEqual(objectA, objectB);\n      }\n\n      if (isPromiseLike(objectA) || isPromiseLike(objectB)) {\n        return objectA === objectB;\n      }\n\n      if (HAS_MAP_SUPPORT) {\n        var mapA = objectA instanceof Map;\n        var mapB = objectB instanceof Map;\n\n        if (mapA || mapB) {\n          return mapA === mapB && areMapsEqual(objectA, objectB, isEqual, meta);\n        }\n      }\n\n      if (HAS_SET_SUPPORT) {\n        var setA = objectA instanceof Set;\n        var setB = objectB instanceof Set;\n\n        if (setA || setB) {\n          return setA === setB && areSetsEqual(objectA, objectB, isEqual, meta);\n        }\n      }\n\n      return areObjectsEqual(objectA, objectB, isEqual, meta);\n    }\n\n    return comparator;\n  }; // comparator\n\n\n  var circularDeepEqual = createComparator(createCircularEqual());\n  var circularShallowEqual = createComparator(createCircularEqual(sameValueZeroEqual));\n  var deepEqual = createComparator();\n  var shallowEqual = createComparator(function () {\n    return sameValueZeroEqual;\n  });\n  var index = {\n    circularDeep: circularDeepEqual,\n    circularShallow: circularShallowEqual,\n    createCustom: createComparator,\n    deep: deepEqual,\n    sameValueZero: sameValueZeroEqual,\n    shallow: shallowEqual\n  };\n  exports.circularDeepEqual = circularDeepEqual;\n  exports.circularShallowEqual = circularShallowEqual;\n  exports.createCustomEqual = createComparator;\n  exports.deepEqual = deepEqual;\n  exports.default = index;\n  exports.sameValueZeroEqual = sameValueZeroEqual;\n  exports.shallowEqual = shallowEqual;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}