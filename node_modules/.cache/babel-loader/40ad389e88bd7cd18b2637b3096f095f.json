{"ast":null,"code":"// constants\nimport { VALID_QUOTES } from './constants'; // utils\n\nimport { createGetNormalizedCreateKey, getNormalizedParseKey, map, parseStringPath } from './utils';\nvar isArray = Array.isArray;\n/**\n * @function create\n *\n * @description\n * create a new path string based on the path and quote passed\n *\n * @param {Array<number|string>} path the path to convert to a string\n * @param {string} [quote=\"] the quote string to use when quoting keys\n * @returns {string} the path string\n */\n\nexport var create = function create(path, quote) {\n  if (quote === void 0) {\n    quote = '\"';\n  }\n\n  if (!isArray(path)) {\n    throw new ReferenceError('path passed must be an array');\n  }\n\n  if (!VALID_QUOTES.test(quote)) {\n    throw new SyntaxError(\"quote \" + quote + \" passed is invalid, must be \\\", `, or '.\");\n  }\n\n  var pathString = path.reduce(createGetNormalizedCreateKey(quote), '');\n  return pathString[0] === '.' ? pathString.slice(1) : pathString;\n};\n/**\n * @function parse\n *\n * @description\n * the path parsed into a valid array of keys / indices\n *\n * @param {Array<number|string>|number|string} path the path to parse\n * @returns {Array<number|string>} the parsed path\n */\n\nexport var parse = function parse(path) {\n  if (typeof path === 'string') {\n    return parseStringPath(path);\n  }\n\n  if (isArray(path)) {\n    return map(path, getNormalizedParseKey);\n  }\n\n  var normalizedParseKey = getNormalizedParseKey(path);\n  return [typeof normalizedParseKey === 'number' ? normalizedParseKey : \"\" + normalizedParseKey];\n};","map":null,"metadata":{},"sourceType":"module"}