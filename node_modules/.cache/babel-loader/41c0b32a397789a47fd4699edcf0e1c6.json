{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.curriable = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\r\n   * @constant __ placeholder used when parameters are skipped\r\n   */\n\n  var __ = typeof Symbol === 'function' ? Symbol('curriable placeholder') : 0xedd1;\n  /**\r\n   * @function recursiveCurry\r\n   *\r\n   * @description\r\n   * recursively curry over the arguments until all have been resolved\r\n   *\r\n   * @param fn the function to curry\r\n   * @param arity the length of the function to curry until\r\n   * @param args the existing arguments\r\n   * @returns the result of the function call\r\n   */\n\n\n  function getCurried(fn, arity) {\n    function _curried(args) {\n      return function () {\n        var length = args.length;\n        var newArgs = arguments;\n        var newArgsLength = newArgs.length;\n        var combined = [];\n        var newArgsIndex = 0;\n        var remaining = arity;\n        var value;\n\n        if (length) {\n          var index = -1;\n\n          while (++index < length) {\n            combined[index] = value = args[index] === __ && newArgsIndex < newArgsLength ? newArgs[newArgsIndex++] : args[index];\n\n            if (value !== __) {\n              --remaining;\n            }\n          }\n        }\n\n        if (newArgsIndex < newArgsLength) {\n          while (newArgsIndex < newArgsLength) {\n            combined[combined.length] = value = newArgs[newArgsIndex];\n\n            if (value !== __ && newArgsIndex < arity) {\n              --remaining;\n            }\n\n            ++newArgsIndex;\n          }\n        }\n\n        return remaining > 0 ? _curried(combined) : fn.apply(this, combined);\n      };\n    }\n\n    return _curried([]);\n  } // utils\n\n\n  function curry(fn, arityOverride) {\n    var arity = typeof arityOverride === 'number' ? arityOverride : fn.length;\n    var curried = getCurried(fn, arity);\n    curried.arity = arity;\n    curried.fn = fn;\n    return curried;\n  }\n\n  curry.__ = __;\n  /**\r\n   * @function isPlaceholder\r\n   *\r\n   * @description\r\n   * is the value passed a placeholder\r\n   *\r\n   * @param value the value to test\r\n   * @returns whether the value is a placeholder\r\n   */\n\n  function isPlaceholder(value) {\n    return value === __;\n  }\n\n  curry.isPlaceholder = isPlaceholder;\n  /**\r\n   * @function uncurry\r\n   *\r\n   * @description\r\n   * return a function that is the non-curried version of the fn passed\r\n   *\r\n   * @param curried the curried function to uncurry\r\n   * @returns the original fn\r\n   */\n\n  function uncurry(curried) {\n    return curried.fn;\n  }\n\n  curry.uncurry = uncurry;\n  exports.__ = __;\n  exports.curry = curry;\n  exports.default = curry;\n  exports.isPlaceholder = isPlaceholder;\n  exports.uncurry = uncurry;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}